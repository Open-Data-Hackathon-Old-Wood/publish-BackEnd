-- 001_init.sql
-- Requirements: PostgreSQL + PostGIS

-- 1) PostGIS extension
CREATE EXTENSION IF NOT EXISTS postgis;

BEGIN;

-- 2) Drop existing tables (re-create cleanly)
DROP TABLE IF EXISTS images CASCADE;
DROP TABLE IF EXISTS point_details_matsu CASCADE;
DROP TABLE IF EXISTS point_details_nara CASCADE;
DROP TABLE IF EXISTS points CASCADE;

-- 3) points
CREATE TABLE points (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category    VARCHAR(8),
    geom        geometry(POINT, 4326) NOT NULL,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT points_category_chk CHECK (category IN ('Matsu','Nara'))
);

-- spatial index for fast nearby queries
CREATE INDEX points_geom_gix ON points USING GIST (geom);
-- optional: category filter
CREATE INDEX points_category_idx ON points (category);

-- 4) point_details_nara (1:1 with points)
CREATE TABLE point_details_nara (
    point_id    INTEGER PRIMARY KEY
                REFERENCES points(id) ON DELETE CASCADE,
    needle_size INTEGER NOT NULL,
    notes       TEXT
);

-- 5) point_details_matsu (1:1 with points)
CREATE TABLE point_details_matsu (
    point_id      INTEGER PRIMARY KEY
                  REFERENCES points(id) ON DELETE CASCADE,
    health_status INTEGER NOT NULL,
    notes         TEXT NOT NULL
);

-- 6) images (1:many with points)
CREATE TABLE images (
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    point_id       INTEGER NOT NULL
                   REFERENCES points(id) ON DELETE CASCADE,
    bucket         TEXT NOT NULL,         -- S3/MinIO bucket name
    object_key     TEXT NOT NULL,         -- object key
    photo_category TEXT NOT NULL,         -- e.g. wholeTree, detail, base, leaves
    -- prevent exact duplicate object within same bucket (optional, comment out if not desired)
    -- CONSTRAINT images_bucket_key_uniq UNIQUE (bucket, object_key),
    -- constrain known categories (adjust freely)
    CONSTRAINT images_photo_category_chk
        CHECK (photo_category IN ('wholeTree','detail','base','leaves'))
);

CREATE INDEX images_point_id_idx ON images(point_id);

-- 7) trigger to auto-update updated_at on points
-- (SQLAlchemy onupdate=func.now() でも更新されますが、DB側でも担保したい場合)
CREATE OR REPLACE FUNCTION set_points_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_points_set_updated_at ON points;
CREATE TRIGGER trg_points_set_updated_at
BEFORE UPDATE ON points
FOR EACH ROW
EXECUTE FUNCTION set_points_updated_at();

COMMIT;